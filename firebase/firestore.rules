rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

// 何らかの方法で認証が済んでいること
function isAnyAuthentificated() {
  return request.auth != null;
}

// 認証が済んでいるのが本人であること
function isUserAuthentificated(userId) {
  return isAnyAuthentificated() && userId == request.auth.uid;
}

function isValidUserCreate(user, targetUserId) {
  return user.size() == 3
  && 'createdAt' in user && user.createdAt is timestamp
  && 'email' in user && user.email is string
  && 'userId' in user && user.userId is string && user.userId == targetUserId;
        }

// レシピ新規作成のルール
function isValidRecipeAdd(recipe, targetUserId) {
  return 
  recipe.size() == 13
  && 'content' in recipe && recipe.content is string
  && 'createdAt' in recipe && recipe.createdAt is timestamp && recipe.createdAt == request.time
  && 'documentId' in recipe && recipe.documentId is string
  && 'imageURL' in recipe && recipe.imageURL is string && recipe.imageURL.size() > 0 && recipe.imageURL.size() < 1000
  && 'imageName' in recipe && recipe.imageName is string 
  && 'isPublic' in recipe && recipe.isPublic is bool
  && 'name' in recipe && recipe.name is string
  && 'reference' in recipe && recipe.reference is string
  && 'thumbnailURL' in recipe && recipe.thumbnailURL is string
  && 'thumbnailName' in recipe && recipe.thumbnailName is string
  && 'tokenMap' in recipe && recipe.tokenMap is map
  && 'updatedAt' in recipe && recipe.updatedAt is timestamp && recipe.updatedAt == request.time
  && 'userId' in recipe && recipe.userId is string && request.auth.uid == targetUserId;
}
// レシピ更新時のルール
// function isValidRecipeUpdate(recipe, updateUserId) {
//   return 
//   recipe.content is string
//   // && recipe.createdAt is timestamp
//   && recipe.documentId is string
//   && recipe.imageURL is string && recipe.imageURL.size() > 0 && recipe.imageURL.size() < 1000
//   && recipe.imageName is string 
//   && recipe.isPublic is bool
//   && recipe.name is string
//   && recipe.reference is string
//   && recipe.thumbnailURL is string && recipe.thumbnailURL.size() > 0 && recipe.thumbnailURL.size() < 1000
//   && recipe.thumbnailName is string
//   && recipe.tokenMap is map
//   && recipe.updatedAt is timestamp && recipe.createdAt == request.time
//   && recipe.userId is string && request.auth.uid == updateUserId;
// }

// filenameを更新していないかどうか
function isNotUpdating(fileName) {
  return !(request.resource.data[fileName]) 
  || request.resource.data[fileName] == resource.data[fileName]
}

// root / users(ユーザードキュメント)
match /users/{userId} {
  allow get: if isUserAuthentificated(userId);
  allow create: if isUserAuthentificated(userId) 
    && isValidUserCreate(request.resource.data, userId);
  allow update: if isUserAuthentificated(userId)
    && isValidUserUpdate(request.resource.data, userId)
    && isNotUpdating(createdAt);

  // root / users / {userId} / recipes / {recipeId}(わたしのレシピ)
  match/recipes/{recipeId} {
    allow read: if isUserAuthentificated(userId); 
    allow create: if isUserAuthentificated(userId) 
      && isValidRecipeAdd(request.resource.data, userId);
    allow update: if isUserAuthentificated(userId) 
      // && isValidRecipeUpdate(resource.data, userId)
      && isNotUpdating(createdAt);
    allow delete: if isUserAuthentificated(userId);
  }
}
//root / public_recipes(みんなのレシピ)
match/public_recipes/{public_recipeId} {
  allow read: if isAnyAuthentificated();
  allow create: if isUserAuthentificated(public_recipeId);
  allow update: if isUserAuthentificated(public_recipeId); 
  allow delete: if isUserAuthentificated(public_recipeId);
}

//root/contacts コレクションのドキュメント
match /contacts/{contactId} {
  allow create: if isAnyAuthentificated();
}
}
}