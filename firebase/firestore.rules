rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 何らかの方法で認証が済んでいること
    function isAnyAuthentificated() {
      return request.auth != null;
    }

    // 認証が済んでいるのが本人であること
    function isUserAuthentificated(userId) {
      return isAnyAuthentificated() && userId == request.auth.uid;
    }

    // ユーザーデータのスキーマ検証
    function isValidUser(user) {
      return user.size() == 8
        && 'createdAt' in user && user.createdAt is timestamp
        && 'displayName' in user && user.displayName is string
        && 'email' in user && (user.email is string || user.email == null) // 匿名ユーザーも考慮する
        && 'iconName' in user && (user.iconName is string || user.iconName == null)
        && 'iconURL' in user && (user.iconURL is string || user.iconURL == null)
        && 'publicRecipeCount' in user && user.publicRecipeCount is int
        && 'recipeCount' in user && user.recipeCount is int
        && 'userId' in user && user.userId is string;
    }

    // レシピデータのスキーマ検証
    function isValidRecipe(recipe) {
      return recipe.size() == 13
        && 'content' in recipe && recipe.content is string
        && 'createdAt' in recipe && recipe.createdAt is timestamp
        && 'documentId' in recipe && recipe.documentId is string
        && 'imageName' in recipe && (recipe.imageName is string || recipe.imageName == null)
        && 'imageURL' in recipe && (recipe.imageURL is string || recipe.imageURL == null)
        && 'isPublic' in recipe && recipe.isPublic is bool
        && 'name' in recipe && recipe.name is string
        && 'reference' in recipe && recipe.reference is string
        && 'thumbnailName' in recipe && (recipe.thumbnailName is string || recipe.thumbnailName == null)
        && 'thumbnailURL' in recipe && (recipe.thumbnailURL is string || recipe.thumbnailURL == null)
        && 'tokenMap' in recipe && recipe.tokenMap is map
        && 'updatedAt' in recipe && recipe.updatedAt is timestamp
        && 'userId' in recipe && recipe.userId is string
      ;
    }

    function isValidFavoriteRecipe(recipe) {
      return recipe.size() == 14
        && 'content' in recipe && recipe.content is string
        && 'createdAt' in recipe && recipe.createdAt is timestamp
        && 'documentId' in recipe && recipe.documentId is string
        && 'imageName' in recipe && (recipe.imageName is string || recipe.imageName == null)
        && 'imageURL' in recipe && (recipe.imageURL is string || recipe.imageURL == null)
        && 'isPublic' in recipe && recipe.isPublic is bool
        && 'likedAt' in recipe && recipe.likedAt is timestamp
        && 'name' in recipe && recipe.name is string
        && 'reference' in recipe && recipe.reference is string
        && 'thumbnailName' in recipe && (recipe.thumbnailName is string || recipe.thumbnailName == null)
        && 'thumbnailURL' in recipe && (recipe.thumbnailURL is string || recipe.thumbnailURL == null)
        && 'tokenMap' in recipe && recipe.tokenMap is map
        && 'updatedAt' in recipe && recipe.updatedAt is timestamp
        && 'userId' in recipe && recipe.userId is string
      ;
    }

    // /users
    match /users/{userId} {
      allow get: if isUserAuthentificated(userId);
      allow create: if isUserAuthentificated(userId)
        // スキーマ検証
        && isValidUser(request.resource.data)
        // バリデーション
        && request.resource.data.createdAt == request.time
        && request.resource.data.displayName.size() <= 30
        && request.resource.data.publicRecipeCount >= 0
        && request.resource.data.publicRecipeCount < 10000
        && request.resource.data.recipeCount >= 0
        && request.resource.data.recipeCount < 10000
        && request.resource.data.userId == userId
      ;
      allow update: if isUserAuthentificated(userId) 
        // スキーマ検証
        && isValidUser(request.resource.data)
        // バリデーション
        && request.resource.data.displayName.size() <= 30
        && request.resource.data.publicRecipeCount >= 0
        && request.resource.data.publicRecipeCount < 10000
        && request.resource.data.recipeCount >= 0
        && request.resource.data.recipeCount < 10000
        && (request.resource.data.publicRecipeCount == resource.data.publicRecipeCount
        ||  request.resource.data.publicRecipeCount == resource.data.publicRecipeCount + 1
        ||  request.resource.data.publicRecipeCount == resource.data.publicRecipeCount - 1
        )
        && (request.resource.data.recipeCount == resource.data.recipeCount
        ||  request.resource.data.recipeCount == resource.data.recipeCount + 1
        ||  request.resource.data.recipeCount == resource.data.recipeCount - 1
        )
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.userId == resource.data.userId
      ;

      // /users/{userId}/recipes
      match /recipes/{recipeId} {
        allow read: if isUserAuthentificated(userId); 
        allow create: if isUserAuthentificated(userId)
          // スキーマ検証
          && isValidRecipe(request.resource.data)
          // バリデーション
          && request.resource.data.content.size() > 0
          && request.resource.data.content.size() <= 1000
          && request.resource.data.createdAt == request.time
          && request.resource.data.documentId == recipeId
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 30
          && request.resource.data.reference.size() >= 0
          && request.resource.data.reference.size() < 1000
          && request.resource.data.updatedAt == request.time
          && request.resource.data.userId == userId;
        allow update: if isUserAuthentificated(userId) 
          // スキーマ検証
          && isValidRecipe(request.resource.data)
          // バリデーション
          && request.resource.data.content.size() > 0
          && request.resource.data.content.size() <= 1000
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 30
          && request.resource.data.reference.size() >= 0
          && request.resource.data.reference.size() < 1000
          && request.resource.data.updatedAt == request.time
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.documentId == resource.data.documentId
          && request.resource.data.userId == resource.data.userId
        ;
        allow delete: if isUserAuthentificated(userId);
      }

      // /users/{userId}/favorite_recipes
      match /favorite_recipes/{recipeId} {
        allow read: if isUserAuthentificated(userId);
        allow create: if isUserAuthentificated(userId)
          // スキーマ検証
          && isValidFavoriteRecipe(request.resource.data)
          // バリデーション
          && request.resource.data.content.size() > 0
          && request.resource.data.content.size() <= 1000
          && request.resource.data.documentId == recipeId
          && request.resource.data.likedAt == request.time
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 30
          && request.resource.data.reference.size() >= 0
          && request.resource.data.reference.size() < 1000
          && request.resource.data.userId == userId
        ;
        allow update: if isUserAuthentificated(userId)
          // スキーマ検証
          && isValidFavoriteRecipe(request.resource.data)
          // バリデーション
          && request.resource.data.content.size() > 0
          && request.resource.data.content.size() <= 1000
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 30
          && request.resource.data.reference.size() >= 0
          && request.resource.data.reference.size() < 1000
          && request.resource.data.updatedAt == request.time
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.documentId == resource.data.documentId
          && request.resource.data.likedAt == resource.data.likedAt
          && request.resource.data.userId == resource.data.userId
        ;
        allow delete: if isUserAuthentificated(userId);
      }
      
    }

    // /public_recipes
    match /public_recipes/{recipeId} {
      allow read: if isAnyAuthentificated();
      allow create: if isAnyAuthentificated()
        // スキーマ検証
        && isValidRecipe(request.resource.data)
        // バリデーション
        && request.resource.data.content.size() > 0
        && request.resource.data.content.size() <= 1000
        && request.resource.data.createdAt == request.time
        && request.resource.data.documentId == recipeId
        && request.resource.data.isPublic == true  // お気に入りのレシピの作成時は必ず isPublic == true
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 30
        && request.resource.data.reference.size() >= 0
        && request.resource.data.reference.size() < 1000
        && request.resource.data.updatedAt == request.time
        && request.resource.data.userId == request.auth.uid
      ;
      allow update: if isAnyAuthentificated()
        // スキーマ検証
        && isValidRecipe(request.resource.data)
        // バリデーション
        && request.resource.data.content.size() > 0
        && request.resource.data.content.size() <= 1000
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 30
        && request.resource.data.reference.size() >= 0
        && request.resource.data.reference.size() < 1000
        && request.resource.data.updatedAt == request.time
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.documentId == resource.data.documentId
        && request.resource.data.userId == resource.data.userId
      ; 
      allow delete: if isAnyAuthentificated()
        && resource.data.userId == request.auth.uid
      ;
    }

    // /contacts
    match /contacts/{contactId} {
      allow create: if isAnyAuthentificated();
    }

    // /settings
    match /settings/{documentId} {
      allow read: if true;
    }
  }
}